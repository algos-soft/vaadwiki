https://www.baeldung.com/spring-inject-prototype-bean-into-singleton

https://www.vojtechruzicka.com/field-dependency-injection-considered-harmful/

==========================================================================
https://blog.marcnuri.com/field-injection-is-not-recommended/

Injection types

Although current documentation for spring framework (5.0.3) only defines two major types of injection, in reality there are three;

    Constructor-based dependency injection
    Setter-based dependency injection
    Field-based dependency injection

The latter is the one which the static code analysis tool complains about, but is regularly and extensively used.


Field-based dependency injection drawbacks
Disallows immutable field declaration

Field-based dependency injection won’t work on fields that are declared final/immutable as this fields must be instantiated at class instantiation. The only way to declare immutable dependencies is by using constructor-based dependency injection.
Eases single responsibility principle violation

As you know, in object-oriented computer programming, the SOLID acronym defines five design principles that will make your code understandable, flexible and maintainable.

The S in SOLID stands for single responsibility principle, meaning that a class should only be responsible for a single part of the functionality of the software application and all its services should be aligned narrowly with that responsibility.

With field-based dependency injection, it’s really easy to have lots of dependencies in your class and everything will look just fine. If constructor-based dependency injection is used instead, as more dependencies are added to your class, the constructor grows bigger and bigger and code starts to smell, sending clear signals that something is wrong.

Having a constructor with more than ten arguments is a clear sign that the class has too many collaborators and that maybe is a good time to start splitting the class into smaller and more maintainable pieces.

So although field-injection is not directly responsible for breaking the single responsibility principle it surely enough helps by hiding signals that otherwise would be really clear.
Tightly coupled with dependency injection container

The main reason to use field-based injection is to avoid the boilerplate code for getters and setters or creating constructors for your class. In the end, this means that the only way these fields can be set are by Spring container instantiating the class and injecting them using reflection, otherwise the fields will remain null and your class will be broken/useless.

The dependency injection design pattern separates the creation of class dependencies from the class itself transferring this responsibility to a class injector allowing the program design to be loosely coupled and to follow the Single responsibility and Dependency inversion principles (again SOLID). So in the end the decoupling achieved for the class by autowiring its fields is lost by getting coupled again with the class injector (in this case Spring) making the class useless outside of a Spring container.

This means that if you want to use your class outside the application container, for example for unit testing, you are forced to use a Spring container to instantiate your class as there is no other possible way (but reflection) to set the autowired fields.
Hidden dependencies

When using a dependency injection pattern, affected classes should clearly expose these dependencies using a public interface either by exposing the the required dependencies in the constructor or the optional ones using methods (setters). When using field-based dependency injection, the class is inherently hiding this dependencies to the outside world.
Conclusion

We’ve seen that field-based injection should be avoided whenever possible due to its many drawbacks however elegant it may seem. The recommended approach is then to use constructor-based and setter-based dependency injection. Constructor-based injection is recommended for required dependencies allowing them to be immutable and preventing them to be null. Setter-based injection is recommended for optional dependencies.

==========================================================================
==========================================================================
https://www.programmersought.com/article/30381245087/

Comparison:

Advantages: The variable mode injection is very simple, without any extra code, which effectively improves the simplicity of java. Even if you have a few more dependencies, you can solve this problem.

Disadvantages: Cannot effectively indicate dependencies. I believe that many people have encountered a bug, the object of the dependency injection is null. The problem encountered when starting the dependency container is that the dependency injection of the configuration is less than an annotation. However, this method relies too much on the injection container. This class will not work when the entire dependency container is not started, and the dependencies required by this class cannot be provided during reflection.
When using set mode, this is a kind of choice injection, which is optional. Even if this dependency is not injected, it will not affect the operation of the whole class.
When using the constructor mode, you must explicitly indicate that you must force the injection. This class is guaranteed to run by forcing a dependency injection.

on the other hand:
One of the core ideas of dependency injection is that classes managed by the container should not rely on dependencies managed by the container. In the vernacular, if the class uses a dependency injection class, then this Classes that get rid of these dependencies must also work. However, the use of variable injection is not guaranteed.
Since the dependency injection method is used, it means that the class is no longer responsible for these dependencies. These are managed by the container. How do you know exactly which dependencies the class needs? It will use the set method to inject or constructor injection.

Summary:
Variable mode injection should be avoided as much as possible, using set method injection or constructor injection. The choice of these two methods depends on the constructor method if the class is mandatory. If you choose dependencies, Just use the set method to inject.
==========================================================================
